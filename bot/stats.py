import inspect

from dataclasses import dataclass


@dataclass
class Stats:

    physicalDamageDealt: int = None
    visionScore: int = None
    goldSpent: int = None
    goldEarned: int = None
    totalHeal: int = None
    item3: int = None
    trueDamageDealt: int = None
    inhibitorKills: int = None
    champLevel: int = None
    damageDealtToTurrets: int = None
    visionWardsBoughtInGame: int = None
    detectorWardsPlaced: int = None
    consumablesPurchased: int = None
    killingSprees: int = None
    totalMinionsKilled: int = None
    spell1Casts: int = None
    objectivesStolenAssists: int = None
    spell4Casts: int = None
    physicalDamageTaken: int = None
    magicDamageDealt: int = None
    damageDealtToObjectives: int = None
    item4: int = None
    item5: int = None
    pentaKills: int = None
    largestKillingSpree: int = None
    bountyLevel: int = None
    firstTowerKill: bool = None
    champExperience: int = None
    firstBloodAssist: bool = None
    item6: int = None
    spell3Casts: int = None
    longestTimeSpentLiving: int = None
    damageDealtToBuildings: int = None
    tripleKills: int = None
    turretKills: int = None
    dragonKills: int = None
    firstTowerAssist: bool = None
    wardsPlaced: int = None
    nexusLost: int = None
    sightWardsBoughtInGame: int = None
    timeCCingOthers: int = None
    turretTakedowns: int = None
    wardsKilled: int = None
    item2: int = None
    baronKills: int = None
    trueDamageTaken: int = None
    deaths: int = None
    totalDamageTaken: int = None
    objectivesStolen: int = None
    totalHealsOnTeammates: int = None
    totalDamageDealt: int = None
    timePlayed: int = None
    totalTimeSpentDead: int = None
    firstBloodKill: bool = None
    unrealKills: int = None
    inhibitorsLost: int = None
    itemsPurchased: int = None
    physicalDamageDealtToChampions: int = None
    magicDamageTaken: int = None
    damageSelfMitigated: int = None
    spell2Casts: int = None
    largestMultiKill: int = None
    totalUnitsHealed: int = None
    item0: int = None
    assists: int = None
    nexusKills: int = None
    kills: int = None
    totalDamageShieldedOnTeammates: int = None
    summoner2Casts: int = None
    championTransform: int = None
    summoner1Casts: int = None
    totalDamageDealtToChampions: int = None
    neutralMinionsKilled: int = None
    item1: int = None
    trueDamageDealtToChampions: int = None
    quadraKills: int = None
    magicDamageDealtToChampions: int = None
    totalTimeCCDealt: int = None
    doubleKills: int = None
    turretsLost: int = None
    inhibitorTakedowns: int = None
    nexusTakedowns: int = None
    largestCriticalStrike: int = None
    
    def __post_init__(self):
        self.physicalDamageDealt = int(self.physicalDamageDealt) if self.physicalDamageDealt else None
        self.visionScore = int(self.visionScore) if self.visionScore else None
        self.goldSpent = int(self.goldSpent) if self.goldSpent else None
        self.goldEarned = int(self.goldEarned) if self.goldEarned else None
        self.totalHeal = int(self.totalHeal) if self.totalHeal else None
        self.item3 = int(self.item3) if self.item3 else None
        self.trueDamageDealt = int(self.trueDamageDealt) if self.trueDamageDealt else None
        self.inhibitorKills = int(self.inhibitorKills) if self.inhibitorKills else None
        self.champLevel = int(self.champLevel) if self.champLevel else None
        self.damageDealtToTurrets = int(self.damageDealtToTurrets) if self.damageDealtToTurrets else None
        self.visionWardsBoughtInGame = int(self.visionWardsBoughtInGame) if self.visionWardsBoughtInGame else None
        self.detectorWardsPlaced = int(self.detectorWardsPlaced) if self.detectorWardsPlaced else None
        self.consumablesPurchased = int(self.consumablesPurchased) if self.consumablesPurchased else None
        self.killingSprees = int(self.killingSprees) if self.killingSprees else None
        self.totalMinionsKilled = int(self.totalMinionsKilled) if self.totalMinionsKilled else None
        self.spell1Casts = int(self.spell1Casts) if self.spell1Casts else None
        self.objectivesStolenAssists = int(self.objectivesStolenAssists) if self.objectivesStolenAssists else None
        self.spell4Casts = int(self.spell4Casts) if self.spell4Casts else None
        self.physicalDamageTaken = int(self.physicalDamageTaken) if self.physicalDamageTaken else None
        self.magicDamageDealt = int(self.magicDamageDealt) if self.magicDamageDealt else None
        self.damageDealtToObjectives = int(self.damageDealtToObjectives) if self.damageDealtToObjectives else None
        self.item4 = int(self.item4) if self.item4 else None
        self.item5 = int(self.item5) if self.item5 else None
        self.pentaKills = int(self.pentaKills) if self.pentaKills else None
        self.largestKillingSpree = int(self.largestKillingSpree) if self.largestKillingSpree else None
        self.bountyLevel = int(self.bountyLevel) if self.bountyLevel else None
        self.firstTowerKill = bool(self.firstTowerKill) if self.firstTowerKill else None
        self.champExperience = int(self.champExperience) if self.champExperience else None
        self.firstBloodAssist = bool(self.firstBloodAssist) if self.firstBloodAssist else None
        self.item6 = int(self.item6) if self.item6 else None
        self.spell3Casts = int(self.spell3Casts) if self.spell3Casts else None
        self.longestTimeSpentLiving = int(self.longestTimeSpentLiving) if self.longestTimeSpentLiving else None
        self.damageDealtToBuildings = int(self.damageDealtToBuildings) if self.damageDealtToBuildings else None
        self.tripleKills = int(self.tripleKills) if self.tripleKills else None
        self.turretKills = int(self.turretKills) if self.turretKills else None
        self.dragonKills = int(self.dragonKills) if self.dragonKills else None
        self.firstTowerAssist = bool(self.firstTowerAssist) if self.firstTowerAssist else None
        self.wardsPlaced = int(self.wardsPlaced) if self.wardsPlaced else None
        self.nexusLost = int(self.nexusLost) if self.nexusLost else None
        self.sightWardsBoughtInGame = int(self.sightWardsBoughtInGame) if self.sightWardsBoughtInGame else None
        self.timeCCingOthers = int(self.timeCCingOthers) if self.timeCCingOthers else None
        self.turretTakedowns = int(self.turretTakedowns) if self.turretTakedowns else None
        self.wardsKilled = int(self.wardsKilled) if self.wardsKilled else None
        self.item2 = int(self.item2) if self.item2 else None
        self.baronKills = int(self.baronKills) if self.baronKills else None
        self.trueDamageTaken = int(self.trueDamageTaken) if self.trueDamageTaken else None
        self.deaths = int(self.deaths) if self.deaths else None
        self.totalDamageTaken = int(self.totalDamageTaken) if self.totalDamageTaken else None
        self.objectivesStolen = int(self.objectivesStolen) if self.objectivesStolen else None
        self.totalHealsOnTeammates = int(self.totalHealsOnTeammates) if self.totalHealsOnTeammates else None
        self.totalDamageDealt = int(self.totalDamageDealt) if self.totalDamageDealt else None
        self.timePlayed = int(self.timePlayed) if self.timePlayed else None
        self.totalTimeSpentDead = int(self.totalTimeSpentDead) if self.totalTimeSpentDead else None
        self.firstBloodKill = bool(self.firstBloodKill) if self.firstBloodKill else None
        self.unrealKills = int(self.unrealKills) if self.unrealKills else None
        self.inhibitorsLost = int(self.inhibitorsLost) if self.inhibitorsLost else None
        self.itemsPurchased = int(self.itemsPurchased) if self.itemsPurchased else None
        self.physicalDamageDealtToChampions = int(self.physicalDamageDealtToChampions) if self.physicalDamageDealtToChampions else None
        self.magicDamageTaken = int(self.magicDamageTaken) if self.magicDamageTaken else None
        self.damageSelfMitigated = int(self.damageSelfMitigated) if self.damageSelfMitigated else None
        self.spell2Casts = int(self.spell2Casts) if self.spell2Casts else None
        self.largestMultiKill = int(self.largestMultiKill) if self.largestMultiKill else None
        self.totalUnitsHealed = int(self.totalUnitsHealed) if self.totalUnitsHealed else None

    @classmethod
    def from_dict(cls, data: dict):
        return Stats(**{k: v for k, v in data.items() if k in inspect.signature(cls).parameters})
